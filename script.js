const historyData = {};

let currentChart = null;

// Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ localStorage n·∫øu c√≥ (nghƒ©a l√† khi reload trang l·∫°i th√¨ gi·ªØ nguy√™n l·ªãch s·ª≠....ch·∫Øc v·∫≠y)
let savedData = localStorage.getItem("historyData");
if (savedData) {
  Object.assign(historyData, JSON.parse(savedData));
}

function calculate() {
  //T√πy √† ƒë·ªÉ xem sao
  document.getElementById("history").style.display = "none";
  document.getElementById("inputSection").style.display = "block";
  //----------------
  const name = document.getElementById("sampleName").value.trim();
  const edtaVolume = parseFloat(document.getElementById("edtaVolume").value);
  const edtaConcentration = parseFloat(document.getElementById("edtaConcentration").value);
  const waterVolume = parseFloat(document.getElementById("waterVolume").value);

  if (!name || isNaN(edtaVolume) || isNaN(edtaConcentration) || isNaN(waterVolume)) {
    alert("Ch∆∞a c√≥ s·ªë li·ªáu th√¨ ƒëo b·∫±ng ni·ªÅm tin √† =))))??????");
    return;
  }

  const resultCa = (edtaVolume * edtaConcentration) * 100 * (1000 / waterVolume) * 0.4;
  const timestamp = new Date().toLocaleString();

  let classification = "";
  let advice = "";

  if (resultCa < 60) {
    classification = "N∆∞·ªõc m·ªÅm";
    advice = "Ngu·ªìn n∆∞·ªõc ·ªïn ƒë·ªãnh, c√≥ th·ªÉ s·ª≠ d·ª•ng sinh ho·∫°t";
  } else if (resultCa < 120) {
    classification = "H∆°i c·ª©ng";
    advice = "Ngu·ªìn n∆∞·ªõc t∆∞∆°ng ƒë·ªëi ·ªïn, c√≥ th·ªÉ theo d√µi th√™m";
  } else if (resultCa < 180) {
    classification = "C·ª©ng";
    advice = "N√™n xem x√©t thi·∫øt b·ªã l·ªçc/l√†m m·ªÅm n∆∞·ªõc";
  } else {
    classification = "R·∫•t c·ª©ng";
    advice = "Nguy c∆° ƒë√≥ng c·∫∑n ‚Äì n√™n s·ª≠ d·ª•ng thi·∫øt b·ªã l√†m m·ªÅm n∆∞·ªõc";
  }

  if (!historyData[name]) historyData[name] = [];

  const entry = {
    value: resultCa,
    classification: classification,
    advice: advice,
    time: timestamp
  };
  historyData[name].push(entry);

  // L∆∞u l·∫°i l·ªãch s·ª≠ v√†o localStorage
  localStorage.setItem("historyData", JSON.stringify(historyData));

  renderResult(name, entry);
}

function renderResult(name, entry) {
  const resultDiv = document.getElementById("result");
  resultDiv.style.display = "block";

  let html = `
    <strong>M·∫´u n∆∞·ªõc:</strong> ${name}<br/>
    <strong>H√†m l∆∞·ª£ng Ca¬≤‚Å∫:</strong> ${entry.value.toFixed(2)} mg/L<br/>
    <strong>Ph√¢n lo·∫°i:</strong> ${entry.classification}<br/>
    <strong>G·ª£i √Ω:</strong> ${entry.advice}<br/>
    <strong>Th·ªùi gian ƒëo:</strong> ${entry.time}<br/>
  `;

  const count = historyData[name].length;
  if (count >= 2) {
    html += `
      <hr>
      <p><strong>ƒê√£ c√≥ ${count} l·∫ßn ƒëo v·ªõi m·∫´u "${name}".</strong></p>
      <button onclick="showComparisonOptions('${name}')">üîç So s√°nh k·∫øt qu·∫£</button>
    `;
  }

  resultDiv.innerHTML = html;
  clearCanvas();
}

function showComparisonOptions(name) {
  const resultDiv = document.getElementById("result");

  let html = `<h4>Ch·ªçn c√°ch so s√°nh:</h4>`;
  html += `
    <button onclick="showTwoCompare('${name}')">So s√°nh 2 l·∫ßn ƒëo c·ª• th·ªÉ</button>
    <button onclick="showTrend('${name}')">So s√°nh qu√° tr√¨nh</button>
    <div id="compareArea"></div>
  `;
  resultDiv.innerHTML += html;
}

function showTwoCompare(name) {
  const data = historyData[name];
  const compareArea = document.getElementById("compareArea");

  let html = `
    <label>Ch·ªçn 2 l·∫ßn ƒëo:</label><br/>
    <select id="compare1">
      ${data.map((_, i) => `<option value="${i}">L·∫ßn ${i + 1}</option>`).join("")}
    </select>
    <select id="compare2">
      ${data.map((_, i) => `<option value="${i}">L·∫ßn ${i + 1}</option>`).join("")}
    </select>
    <button onclick="drawBarChart('${name}')">So s√°nh</button>
    <canvas id="chartArea" width="400" height="250"></canvas>
  `;
  compareArea.innerHTML = html;
}

function drawBarChart(name) {
  const data = historyData[name];
  const i1 = parseInt(document.getElementById("compare1").value);
  const i2 = parseInt(document.getElementById("compare2").value);

  if (i1 === i2) {
    alert("B·∫°n c·∫ßn so s√°nh 2 k·∫øt qu·∫£ kh√°c nhau")
    
  }
    

  const labels = [`L·∫ßn ${i1 + 1} (${data[i1].time})`, `L·∫ßn ${i2 + 1} (${data[i2].time})`];
  const values = [data[i1].value, data[i2].value];

  const ctx = document.getElementById("chartArea").getContext("2d");
  if (currentChart) {
    currentChart.destroy();
  }
  
  currentChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: `H√†m l∆∞·ª£ng Ca¬≤‚Å∫ c·ªßa m·∫´u "${name}"`,
        data: values,
        backgroundColor: ['#888', '#4ca3dd']
      }]
    },
    options: {
      responsive: false,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'mg/L Ca¬≤‚Å∫' }
        }
      }
    }
  });
}

function showTrend(name) {
  const data = historyData[name];
  const labels = data.map((entry, i) => `L·∫ßn ${i + 1}`);
  const values = data.map(entry => entry.value);

  const compareArea = document.getElementById("compareArea");
  compareArea.innerHTML = `<canvas id="chartArea" width="400" height="250"></canvas>`;

  const ctx = document.getElementById("chartArea").getContext("2d");
  if (currentChart) {
    currentChart.destroy();
  }
  
  currentChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: `Di·ªÖn bi·∫øn Ca¬≤‚Å∫ m·∫´u "${name}"`,
        data: values,
        fill: false,
        borderColor: '#4ca3dd',
        tension: 0.2
      }]
    },
    options: {
      responsive: false,
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'mg/L Ca¬≤‚Å∫' }
        }
      }
    }
  });
}

function showHistory() {
  // ·∫®n ph·∫ßn nh·∫≠p v√† k·∫øt qu·∫£
  document.getElementById("inputSection").style.display = "none";
  document.getElementById("result").style.display = "none";
  // Hi·ªán ph·∫ßn l·ªãch s·ª≠
  const historyDiv = document.getElementById("history");
  historyDiv.style.display = "block";
  //N·∫øu Ch∆∞a m·∫´u n√†o ƒë∆∞·ª£c nh·∫≠p
  if (Object.keys(historyData).length === 0) {
    historyDiv.innerHTML = "<em>Ch∆∞a c√≥ m·∫´u n√†o ƒë∆∞·ª£c ƒëo th√¨ v√†o ƒë√¢y l√†m g√¨,quay l·∫°i ƒëo ƒëi m√°, r·ªìi m·ªõi c√≥ k·∫øt qu·∫£.</em><br><button onclick='backToInput()'>‚Üê Quay l·∫°i</button>";
    return;
  }

  let html = "<h3>L·ªãch s·ª≠ c√°c m·∫´u ƒë√£ ƒëo:</h3><ul>";
  for (const [name, records] of Object.entries(historyData)) {
    html += `<li><strong>${name}</strong> (${records.length} l·∫ßn):<ul>`;
    records.forEach((entry, i) => {
      html += `<li>L·∫ßn ${i + 1} ‚Äì ${entry.value.toFixed(2)} mg/L ‚Äì ${entry.classification} ‚Äì ${entry.time}</li>`;
    });
  html += "</ul></li>";
}
html += "</ul>";

// üëá Th√™m ph·∫ßn ch·ªçn m·∫´u ƒë·ªÉ x√≥a v√† n√∫t x√≥a t·∫•t c·∫£
html += `
  <hr>
  <h4>X√≥a l·ªãch s·ª≠:</h4>
  <label for="deleteSample">Ch·ªçn m·∫´u ƒë·ªÉ x√≥a:</label>
  <select id="deleteSample">
    ${Object.keys(historyData).map(name => `<option value="${name}">${name}</option>`).join("")}
  </select>
  <button onclick="deleteSample()">‚ùå X√≥a m·∫´u n√†y</button>
  <br><br>
  <button onclick="deleteAll()">üî• X√≥a to√†n b·ªô l·ªãch s·ª≠</button>
`;

// N√∫t quay l·∫°i
html += `<br><button onclick="backToInput()">‚Üê Quay l·∫°i</button>`;
historyDiv.innerHTML = html;
}

function backToInput() {
  document.getElementById("inputSection").style.display = "block";
  document.getElementById("history").style.display = "none";
  document.getElementById("result").style.display = "none";
}

function deleteSample() {
  const select = document.getElementById("deleteSample");
  const nameToDelete = select.value;
  if (confirm(`B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô k·∫øt qu·∫£ c·ªßa m·∫´u "${nameToDelete}"?`)) {
    delete historyData[nameToDelete];
    localStorage.setItem("historyData", JSON.stringify(historyData));
    alert(`ƒê√£ x√≥a m·∫´u "${nameToDelete}".`);
    showHistory(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
  }
}

function deleteAll() {
  if (confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ l·ªãch s·ª≠ ƒëo kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!")) {
    for (let key in historyData) delete historyData[key];
    localStorage.removeItem("historyData");
    alert("ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠.");
    showHistory(); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
  }
}
